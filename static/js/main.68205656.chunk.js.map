{"version":3,"sources":["Store/index.js","util/parseInfo.js","DropFont/index.js","Reducer/index.js","Header/index.js","FillSelect/index.js","App.js","serviceWorker.js","index.js"],"names":["context","React","createContext","Provider","Consumer","codePoints","SPACE","requiredChars","fallback","char","factor","requiredFillers","widths","Object","keys","map","key","exists","i","length","fallbackWidth","width","findWidth","name","hex","findGlyphWidthByUni","glyphs","uni","glyph","find","unicodes","includes","findByUnicode","findGlyphByUni","advanceWidth","writeFont","info","console","log","push","Glyph","path","Path","forEach","item","unicode","parseInt","font","Font","familyName","styleName","fontSubfamily","unitsPerEm","ascender","os2","sTypoAscender","descender","sTypoDescender","tables","sTypoLineGap","sxHeight","sCapHeight","download","parseInfo","conf","FIGURE_SPACE","NO_BREAK_SPACE","THIN_SPACE","NARROW_NO_BREAK_SPACE","ZERO","head","table","en","DropFont","useContext","dispatch","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","type","payload","error","onerror","onload","binaryStr","result","parse","file","err","message","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","className","initialState","reducer","state","action","Header","role","aria-label","JSON","stringify","FillSelect","generate","onClick","filter","href","target","rel","join","App","useState","useReducer","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68205656.chunk.js","sourcesContent":["import React from \"react\";\n\nconst context = React.createContext({});\n\nexport const Provider = context.Provider;\nexport const Consumer = context.Consumer;\nexport default context;\n","// import { Glyph, Path, Font } from \"opentype.js\";\nimport { Glyph, Path, Font } from \"opentype.js/src/opentype.js\";\n\nexport const codePoints = {\n  \"NO-BREAK SPACE\": \"00A0\",\n  \"THIN SPACE\": \"2009\",\n  \"NARROW NO-BREAK SPACE\": \"202F\",\n  \"FIGURE SPACE\": \"2007\",\n  \"DIGIT ZERO\": \"0030\",\n  SPACE: \"0020\"\n};\n\nexport const requiredChars = {\n  \"NO-BREAK SPACE\": {\n    fallback: [{ char: \"SPACE\" }]\n  },\n  \"THIN SPACE\": {\n    fallback: [{ char: \"SPACE\", factor: 0.7 }]\n  },\n  \"NARROW NO-BREAK SPACE\": {\n    fallback: [{ char: \"THIN SPACE\" }, { char: \"SPACE\", factor: 0.7 }]\n  },\n  \"FIGURE SPACE\": {\n    fallback: [{ char: \"DIGIT ZERO\" }]\n  }\n};\n\nexport const findWidth = (fallback, widths) => {\n  for (var i = 0; i < fallback.length; i++) {\n    let fallbackWidth = widths[fallback[i].char];\n    if (fallbackWidth) {\n      return {\n        char: fallback[i].char,\n        width: fallbackWidth,\n        factor: fallback[i].factor || 1\n      };\n    }\n  }\n  return {};\n};\n\nexport const requiredFillers = widths => {\n  return Object.keys(requiredChars).map(key => {\n    let exists = false;\n    let fallback = {};\n    if (widths[key]) {\n      exists = true;\n    } else {\n      fallback = findWidth(requiredChars[key].fallback, widths);\n    }\n    return {\n      name: key,\n      hex: codePoints[key],\n      exists,\n      fallback\n    };\n  });\n};\n\nconst findByUnicode = (glyph, uni) => {\n  return glyph.unicodes.includes(uni);\n};\n\nconst findGlyphByUni = (glyphs, uni) => {\n  let key = Object.keys(glyphs).find(key => findByUnicode(glyphs[key], uni));\n\n  if (key) {\n    return glyphs[key];\n  }\n\n  return null;\n};\n\nconst findGlyphWidthByUni = (glyphs, uni) => {\n  let glyph = findGlyphByUni(glyphs, uni);\n  if (glyph) {\n    return glyph.advanceWidth;\n  }\n  return null;\n};\n\nexport const writeFont = (info, fallback) => {\n  console.log({ info, fallback });\n  let glyphs = [];\n  // The notdefGlyph always needs to be included.\n  glyphs.push(\n    new Glyph({\n      name: \".notdef\",\n      advanceWidth: 650,\n      path: new Path()\n    })\n  );\n\n  fallback.forEach(item => {\n    glyphs.push(\n      new Glyph({\n        name: `uni${item.hex}`,\n        unicode: parseInt(item.hex, 16),\n        advanceWidth: item.fallback.width * item.fallback.factor,\n        path: new Path()\n      })\n    );\n  });\n\n  // Create the font using measurements + glyphs defined above.\n  var font = new Font({\n    familyName: \"FontFiller\",\n    styleName: info.fontSubfamily,\n    unitsPerEm: info.unitsPerEm,\n    ascender: info.os2.sTypoAscender,\n    descender: info.os2.sTypoDescender,\n    glyphs: glyphs\n  });\n\n  font.tables.os2 = {\n    ...font.tables.os2,\n    sTypoLineGap: info.os2.sTypoLineGap,\n    sxHeight: info.os2.sxHeight,\n    sCapHeight: info.os2.sCapHeight\n  };\n\n  // var test = new Font({\n  //   familyName: \"TestFont\",\n  //   styleName: \"Bold\",\n  //   unitsPerEm: 2048,\n  //   ascender: 1500,\n  //   descender: -500,\n  //   glyphs: [\n  //     new Glyph({\n  //       name: \".notdef\",\n  //       advanceWidth: 650,\n  //       path: new Path()\n  //     })\n  //   ]\n  // });\n  //\n  // test.tables.os2 = {\n  //   ...test.tables.os2,\n  //   sxHeight: 1100,\n  //   sCapHeight: 1400\n  // };\n  // test.download();\n\n  font.download();\n};\n\nexport const parseInfo = font => {\n  let conf = {\n    unitsPerEm: null,\n    fontSubfamily: null,\n    os2: {\n      sTypoAscender: null,\n      sTypoDescender: null,\n      sTypoLineGap: null,\n      sxHeight: null,\n      sCapHeight: null\n    },\n    width: {\n      FIGURE_SPACE: null,\n      NO_BREAK_SPACE: null,\n      THIN_SPACE: null,\n      NARROW_NO_BREAK_SPACE: null,\n      ZERO: null,\n      SPACE: null\n    }\n  };\n\n  if (font.tables.head) {\n    let table = font.tables.head;\n    conf.unitsPerEm = table.unitsPerEm;\n  }\n\n  if (font.tables.name) {\n    let table = font.tables.name;\n    conf.fontSubfamily = table.fontSubfamily.en;\n  }\n\n  if (font.tables.os2) {\n    let table = font.tables.os2;\n    conf.os2.sTypoAscender = table.sTypoAscender;\n    conf.os2.sTypoDescender = table.sTypoDescender;\n    conf.os2.sTypoLineGap = table.sTypoLineGap;\n    conf.os2.sxHeight = table.sxHeight;\n    conf.os2.sCapHeight = table.sCapHeight;\n  }\n\n  conf.width = {};\n  Object.keys(codePoints).forEach(\n    key =>\n      (conf.width[key] = findGlyphWidthByUni(\n        font.glyphs.glyphs,\n        parseInt(codePoints[key], 16)\n      ))\n  );\n\n  return conf;\n};\n","import React, { useContext, useCallback, Fragment } from \"react\";\nimport { parse } from \"opentype.js\";\n\nimport { useDropzone } from \"react-dropzone\";\nimport context from \"../Store\";\nimport { parseInfo } from \"../util/parseInfo\";\n\nimport \"./styles.css\";\n\n// import opentypejs from 'opentype.js';\n\nfunction DropFont() {\n  const [, dispatch] = useContext(context);\n\n  const onDrop = useCallback(\n    acceptedFiles => {\n      const reader = new FileReader();\n\n      reader.onabort = () =>\n        dispatch({\n          type: \"ERROR\",\n          payload: {\n            error: \"file reading was aborted\"\n          }\n        });\n\n      reader.onerror = () =>\n        dispatch({\n          type: \"ERROR\",\n          payload: {\n            error: \"file reading has failed\"\n          }\n        });\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n\n        const binaryStr = reader.result;\n\n        try {\n          let font = parse(binaryStr);\n\n          dispatch({\n            type: \"LOAD\",\n            payload: {\n              file: font,\n              info: parseInfo(font)\n            }\n          });\n        } catch (err) {\n          dispatch({\n            type: \"ERROR\",\n            payload: {\n              error: err.message\n            }\n          });\n        }\n      };\n\n      if (acceptedFiles.length === 1) {\n        acceptedFiles.forEach(file => reader.readAsArrayBuffer(file));\n      } else {\n        dispatch({\n          type: \"ERROR\",\n          payload: {\n            error: \"please select only one file\"\n          }\n        });\n      }\n    },\n    [dispatch]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <Fragment>\n      <div className=\"DropFont\" {...getRootProps()}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <span className=\"DropFont__caption\">Drop the file here ...</span>\n        ) : (\n          <span className=\"DropFont__caption\">\n            Drop a font here, or click to select file\n          </span>\n        )}\n\n        <br />\n        <small>Support for WOFF, OTF, TTF</small>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default DropFont;\n","export const initialState = {\n  file: null,\n  info: null,\n  error: null\n};\n\n// export const initialState = {\n//   file: null,\n//   info: {\n//   \"unitsPerEm\": 2048,\n//   \"fontSubfamily\": \"Bold\",\n//   \"os2\": {\n//     \"sTypoAscender\": 1567,\n//     \"sTypoDescender\": -492,\n//     \"sTypoLineGap\": 132,\n//     \"sxHeight\": 1118,\n//     \"sCapHeight\": 1462\n//   },\n//   \"width\": {\n//     \"NO-BREAK SPACE\": 532,\n//     \"THIN SPACE\": 410,\n//     \"NARROW NO-BREAK SPACE\": null,\n//     \"FIGURE SPACE\": null,\n//     \"DIGIT ZERO\": 1169,\n//     \"SPACE\": 532\n//   }\n// },\n//   error: null\n// };\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ERROR\":\n      return {\n        ...state,\n        error: action.payload.error,\n        file: null,\n        info: null\n      };\n\n    case \"LOAD\":\n      return {\n        ...state,\n        file: action.payload.file,\n        info: action.payload.info,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useContext } from \"react\";\nimport context from \"../Store\";\nimport { codePoints } from \"../util/parseInfo\";\n\nfunction Header() {\n  const [state] = useContext(context);\n\n  return (\n    <header className=\"Header\">\n      <h1>FontFiller</h1>\n      <small>\n        Generate missing whitespace characters for incomplete fonts.\n      </small>\n\n      <h3>Supported characters</h3>\n      <ul>\n        {Object.keys(codePoints).map(key => (\n          <li>\n            <small>U+{codePoints[key]}</small> {key}\n          </li>\n        ))}\n      </ul>\n      {state.error && (\n        <h2>\n          <span role=\"img\" aria-label=\"Warning\">\n            ⚠️\n          </span>{\" \"}\n          {state.error}\n        </h2>\n      )}\n\n      {state.info && (\n        <details>\n          <summary>Debug-Infos</summary>\n          <pre>{JSON.stringify(state.info, null, 2)}</pre>\n        </details>\n      )}\n      <br />\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useContext, Fragment } from \"react\";\nimport context from \"../Store\";\nimport { requiredFillers, codePoints, writeFont } from \"../util/parseInfo\";\nimport \"./styles.css\";\n\nfunction FillSelect() {\n  const [state] = useContext(context);\n\n  if (!state.info) {\n    return null;\n  }\n\n  let generate = requiredFillers(state.info.width);\n\n  return (\n    <div className=\"FillSelect\">\n      <ul className=\"FillSelect__list\">\n        {generate.map(item =>\n          item.exists ? (\n            <li className=\"FillSelect__item FillSelect__item--exists\">\n              <span role=\"img\" aria-label=\"OK\">\n                ✅\n              </span>{\" \"}\n              <small>U+{codePoints[item.name]}</small> {item.name} in font\n            </li>\n          ) : (\n            <li className=\"FillSelect__item FillSelect__item--missing\">\n              <span role=\"img\" aria-label=\"info\">\n                ℹ️\n              </span>{\" \"}\n              <small>U+{codePoints[item.name]}</small> {item.name} not in font{\" \"}\n              <br />\n              {item.fallback.char ? (\n                <span>\n                  <span role=\"img\" aria-label=\"new\">\n                    🆕\n                  </span>{\" \"}\n                  <small>U+{codePoints[item.fallback.char]}</small>{\" \"}\n                  {item.fallback.char} used to generate fallback{\" \"}\n                  {item.fallback.factor !== 1 ? (\n                    <span>(Width × {item.fallback.factor})</span>\n                  ) : (\n                    \"\"\n                  )}\n                </span>\n              ) : (\n                <Fragment>\n                  <span role=\"img\" aria-label=\"error\">\n                    🆕\n                  </span>\n                  <span> no fallback found </span>\n                </Fragment>\n              )}\n            </li>\n          )\n        )}\n      </ul>\n      <button\n        onClick={() =>\n          writeFont(state.info, generate.filter(item => item.fallback.char))\n        }\n      >\n        Download Filler Font (TTF)\n      </button>\n      <h2>Convert & load</h2>\n      <p>\n        After downloading the fillter-font convert the TTF to Woff/Woff2 with{\" \"}\n        <a\n          className=\"App-link\"\n          href=\"https://www.fontsquirrel.com/tools/webfont-generator\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Font Squirrel.\n        </a>{\" \"}\n        Then include like that:\n      </p>\n      <pre>\n        {`@font-face {\n  font-family: \"YourFillerFont\";\n  font-weight: 400;\n  font-style: normal;\n  src: url(\"./fontfiller.woff2\") format(\"woff2\"),\n       url(\"./fontfiller.woff\") format(\"woff\");\n  unicode-range: ${generate\n    .filter(item => item.fallback.char)\n    .map(item => \"U+\" + codePoints[item.fallback.char])\n    .join(\", \")};\n}`}\n      </pre>\n      <p>and use it like that:</p>\n      <pre>\n        {`html {\n  font-family: \"YourFillerFont\", \"HereYourNormalFont\", sans-serif;\n}`}\n      </pre>\n    </div>\n  );\n}\n\nexport default FillSelect;\n","import React, { useReducer } from \"react\";\nimport DropFont from \"./DropFont\";\nimport { Provider } from \"./Store\";\nimport { reducer, initialState } from \"./Reducer\";\nimport Header from \"./Header\";\nimport FillSelect from \"./FillSelect\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const useState = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <Provider value={useState}>\n        <Header />\n        <DropFont />\n        <FillSelect />\n      </Provider>\n\n      <p>\n        Code by Stefan Huber ·{\" \"}\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/signalwerk/font-filler/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {\" \"}\n          OpenSource on GitHub\n        </a>\n      </p>\n\n      <p>\n        Thanks to{\" \"}\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/opentypejs/opentype.js\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {\" \"}\n          opentype.js\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}